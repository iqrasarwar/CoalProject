;
;   _____                        _____                     _               
;  / ____|                      |_   _|                   | |              
; | (___  _ __   __ _  ___ ___    | |  _ ____   ____ _  __| | ___ _ __ ___ 
;  \___ \| '_ \ / _` |/ __/ _ \   | | | '_ \ \ / / _` |/ _` |/ _ \ '__/ __|
;  ____) | |_) | (_| | (_|  __/  _| |_| | | \ V / (_| | (_| |  __/ |  \__ \
; |_____/| .__/ \__,_|\___\___| |_____|_| |_|\_/ \__,_|\__,_|\___|_|  |___/
;        | |                                                                                                                              
;        |_|
; 
;
;		SPACE INVADERS BY 11 : 52 GAMING

	.MODEL LARGE
	.STACK 100H

	.DATA
		GAME_WON DB "------------------HURRAH! YOU WON------------------$"
		GAME_LOST DB "------------------OH! YOU LOST------------------$"

		ENEMIES_DESTROYED DB "ENEMIES DESTROYED: $"
		SCORE DB 0								;FOR SCORE COUNT										
		WIDTH_	DW	30							;WIDTH SIZE
		HEIGHT_ DW  20							;HEIGHT SIZE
		I DW 0									;LOOP VARIABLE
		J DW 0									;LOOP VARIABLE
		Y DW 0									;PLAYER'S Y COORDINATE
		X DW 0									;PLAYER'S X COORDINATE
		EY DW 0									;ENEMY'S COORDINATER
		EX DW 0	
		FY DW 0									;FIRE'S COORDIATES
		FX DW 0
		ENEMYB DB 1								;USED AS BOOL
		GAMEOVER DW ?							;USED AS BOOL
		ENEMYC DW 'V'							;ENEMY
		CLOCK DB 0								;CLOCK VARIABLE
		
		MSG1 DB "GAME INSTRUCTIONS: $"
		MSG2 DB "=> PRESS 'A' TO MOVE PLAYER LEFT & 'D' TO MOVE PLAYER RIGHT$"
		MSG3 DB "=> PRESS 'F' TO FIRE AT ENEMY $"
		MSG4 DB "=> IF YOU HIT 5 ENEMIES YOU WIN$"
		MSG5 DB "=> IF ENEMY HIT LOWER BOUNDARY YOU LOSE$"
		MSG6 DB "=> PRESS ESC TO QUIT THE GAME ANYTIME$"
		MSG7 DB "PRESS ANY KEY TO START....$"

		M1 DB "                            /\$"
		M2 DB "                           /11\$"
		M3 DB "                          / 52 \$"
		M4 DB "                         /_    _\$"
		M6 DB "                          |G   |$"
		M8 DB "                         /| A  |\$"
		M9 DB "                        / |  M | \$"
	   M10 DB "                        \ |   I| /$"
	   M11 DB "                         \|  N |/$"
	   M12 DB "                          | G  |$"
	   M15 DB "                          |____|     $"
	   M16 DB "        ______  _________  ______   ______  _________               $"
	   M17 DB "       |           |      |      | |      |     |                   $"
	   M19 DB "       |______     |      |______| |______|     |                   $"
	   M20 DB "              |    |      |      | |     \      |                   $"
	   M22 DB "        ______|    |      |      | |      \     |                   $"
	
	.CODE
MAIN PROC

		MOV AX, @DATA								;INITIALZING DATA SEGMENT
		MOV DS, AX
		
													;CLEAR_SCREEN
		MOV AH, 0 									;SET MODE FUNCTION
		MOV AL, 3 									;80 X 25 COLOR TEXT MODE
		INT 10H									 	;SET MODE
		
		LEA DX,MSG1									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION 
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		LEA DX,MSG2									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		LEA DX,MSG3									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		LEA DX,MSG4									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		LEA DX,MSG5									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;GET MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		LEA DX,MSG6									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		LEA DX,MSG7									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN

		CALL ROCKET									;DISPLAY LOGO ROCKET
		
		LEA DX,M16									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN

		LEA DX,M17									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		LEA DX,M19									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		LEA DX,M20									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		LEA DX,M22									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		

		MOV AH,1									;READ CHARACTER FUNCTION
		INT 21H										;CHARACTER IN AL
		
															;CLEAR_SCREEN
		MOV AH, 0 									;SET MODE FUNCTION
		MOV AL, 3 									;80 X 25 COLOR TEXT MODE
		INT 10H									 	;SET MODE
		
		
		CALL SETUP									;CALLING THE LABEL/FUNCTION SETUP
		
TRUE1:
	
		CMP GAMEOVER, 1								;COMPARING GAMEOVER WITH 1
		JE EXIT_GAMEOVER							;IF GAMEOVER EQUALS TO 1 JUMP TO EXIT_GAMEOVER
		CMP SCORE, 5								;COMPARE SCORE WITH 5
		JE EXIT_GAMEWIN								;IF SCORE EQUALS TO 5 JUMP TO EXIT_GAMEWIN 

		CALL DRAW									;CALLING DRAW LABEL
		CALL INPUT									;CALLING INPUT LABEL
		CALL LOGIC									;CALLING LOGIC LABEL
		CALL DELAY
		INC CLOCK									;INCREMENTING 1 IN CLOCK 

JMP TRUE1											;JUMP TO THE LABEL TRUE1

EXIT_GAMEOVER:
													;CLEAR_SCREEN
		MOV AH, 0 									;SET MODE FUNCTION
		MOV AL, 3 									;80 x 25 color text
		INT 10H									 	;CLEAR SCREEN
								
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H	
		
		CALL ROCKET									;DISPLAY LOGO ROCKET
				
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		INT 21H
		INT 21H
		INT 21H
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		
		LEA DX, GAME_LOST							;GET MESSAGE
		MOV AH, 09H									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		JMP EXIT									;JUMP TO LABEL EXIT
		
EXIT_GAMEWIN:

													;CLEAR_SCREEN
		MOV AH, 0 									;SET MODE FUNCTION
		MOV AL, 3 									;80 X 25 COLOR TEXT MODE
		INT 10H									 	;SET MODE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H	
		
		CALL ROCKET									;DISPLAY LOGO ROCKET		
		
		MOV AH, 2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		INT 21H
		INT 21H
		INT 21H
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		
		LEA DX, GAME_WON							;GET MESSAGE
		MOV AH, 09H									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE

	
EXIT:
		MOV AH, 4CH									;DOS EXIT FUNCTION
		INT 21H										;EXIT TO DOS
	MAIN ENDP



SETUP PROC
		MOV GAMEOVER, 0								;MOVE 0 TO GAMEOVER
		MOV AX, WIDTH_								;MOVE WIDTH_ TO AX
		SHR AX, 1									;SHIFT 1 BIT AX TO RIGHT
		MOV X, AX									;MOVE AX TO X 
		MOV AX, HEIGHT_								;MOVE HEIGHT_ TO AX
		SUB AX, 1									;SUBTRACTING AX BY 1
		MOV Y, AX									;MOVE AX TO Y
		MOV EY, 0									;MOV 0 TO EY

		MOV AX, DX									;MOV DX TO AX
		XOR DX, DX									;CLEARING DX
		MOV CX, 20									;MOVING 20 TO DX
		DIV CX										;DIVIDING CX
		MOV EX, DX									;MOVING DX TO EX

		XOR AX, AX									;CLEARING AX
		XOR BX, BX									;CLEARING BX
		XOR CX, CX									;CLEARING CX
		XOR DX, DX									;CLEARING DX
	RET	
SETUP ENDP	
													;RETURN IP NEXT TO CALL SETUP
DRAW  PROC
													;CLEAR_SCREEN
		MOV AH, 0 									;SET MODE FUNCTION
		MOV AL, 3 									;80 X 25 COLOR TEXT MODE
		INT 10H									 	;SET MODE

		MOV AX,WIDTH_								;MOV WIDTH_ TO AX
		MOV CX, AX								    ;MOV AX TO CX FOR LOOPING
	FIRST_LOOP:
		MOV AH, 2									;DISPLAY CHARACTER FUNCTION
		MOV DL, '#'									;CHARACTER IS '#'
		INT 21H										;DISPLAY IT
	LOOP FIRST_LOOP									;LOOP		

	NEW_LINE:										;GO TO NEW LINE
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN

		MOV I, 0									;FIRST LOOP ITERATOR
 	SECOND_LOOP:
		MOV J, 0									;SECOND LOOP ITERATOR
	MID_LOOP:
		MOV AX,WIDTH_								;MOV WIDTH_ TO AX
		ADD AX,3									;ADD 3 TO AX
		CMP J, AX									;COMAPRING J WITH AX
		JNL NEW_LINE1								;IF J NOT LESS TO THE RANGE GO TO NEWLINE1 LABEL
		CMP J, 0									;COMPARING J WITH 0
		JNE SKIP_ZERO								;IF J NOT ZERO GO TO SKIP_ZERO LABEL
		MOV AH, 2									;DISPLAY CHARACTER FUNCTION
		MOV DL, '#'									;CHARACTER IS '#'
		INT 21H										;DISPLAY IT

	SKIP_ZERO:									
		CMP J, 0									;COMPARE J WITH 0 
		JNG SKIPPED_IF								;IF J > 0 MOVE FORWARD ELSE GO TO LABEL SKIPPED_IF
		MOV AX,WIDTH_								;MOV WIDTH_ TO AX
		SUB AX,1									;SUBTRACT 1 FROM AX
		CMP J, AX									;COMPARE J WITH AX
		JNL SKIPPED_IF								;IF J < AX MOVE FORWARD ELSE GO TO LABEL SKIPPED_IF
		MOV BX, I									;MOV I TO BX
		CMP BX, Y									;COMPARE BX AND Y 
		JNE NEXT_IF_1								;IF EQUAL MOVE FORWARD ELSE GO TO LABEL NEXT_IF_1
		MOV BX, J								    ;MOV J TO BX								
		CMP BX, X									;COMPARE BX AND X 
		JNE NEXT_IF_1								;IF EQUAL MOVE FORWARD ELSE GO TO LABEL NEXT_IF_1
		
		MOV AH, 2									;DISPLAY CHARACTER FUNCTION
		MOV DL, 'A'									;CHARACTER IS 'A'
		INT 21H										;DISPLAY IT
		JMP SKIPPED_IF								;JUMP TO THE LABEL SKIPPED_IF
	NEXT_IF_1:
		MOV BX, I									;COMPARE EY AND I
		CMP BX, EY									;IF EQUAL MOVE FORWARD 
		JNE NEXT_IF_2								;ELSE GO TO LABEL NEXT_IF_2
		MOV BX, J									;COMPARE EX AND J
		CMP BX, EX									;IF EQUAL MOVE FORWARD 
		JNE NEXT_IF_2								;ELSE GO TO LABEL NEXT_IF_2
		CMP ENEMYB, 1								;IF ENEMYB IS TRUE MOVE FORWARD
		JNE NEXT_IF_2								;ELSE GO TO LABEL NEXT_IF_2
		MOV AH, 2									;ENEMY ;DISPLAY CHARACTER FUNCTION
		MOV DL, 'V'									;CHARACTER IS 'V'
		INT 21H										;DISPLAY IT
		JMP SKIPPED_IF								;JUMP TO THE LABEL SKIPPED_IF
	NEXT_IF_2:
		MOV BX, I									;COMPARE FY AND I
		CMP BX, FY									;IF EQUAL MOVE FORWARD 
		JNE NEXT_IF_3								;ELSE GO TO LABEL NEXT_IF_3
		MOV BX, J									;COMPARE FX AND J
		CMP BX, FX									;IF EQUAL MOVE FORWARD 
		JNE NEXT_IF_3								;ELSE GO TO LABEL NEXT_IF_3
		MOV AH, 2									;FIRE ;DISPLAY CHARACTER FUNCTION
		MOV DL, '.'									;CHARACTER IS '.'
		INT 21H										;DISPLAY IT
		JMP SKIPPED_IF								;JUMP TO THE LABEL SKIPPED_IF
	NEXT_IF_3:
		MOV AH, 2									;FIRE ;DISPLAY CHARACTER FUNCTION
		MOV DL, ' '									;CHARACTER IS ' '
		INT 21H										;DISPLAY IT
	SKIPPED_IF:
		MOV AX, WIDTH_								;MOV WIDTH_ TO AX
		ADD AX,2									;ADD 2 TO AX
		CMP J, AX									;COMPARE AX WITH J							
		JNE SKIP_PRINT								;IF J NOT EQUAL TO AX JUMP TO LABEL SKIP_PRINT
		MOV AH, 2									;FIRE ;DISPLAY CHARACTER FUNCTION
		MOV DL, '#'									;CHARACTER IS '#'
		INT 21H										;DISPLAY IT
	SKIP_PRINT :
		INC J										;INCREMENT 1 IN J 
		MOV AX,WIDTH_								;MOV WIDTH_ TO AX
		ADD AX,3									;ADD 3 TO AX
		CMP J, AX									;COMPARE J WITH AX
	JL MID_LOOP										;IF J LESS THAN AX JUMP TO LABEL MID_LOOP

	NEW_LINE1 :										;PRINT NEW LINE
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN

		INC I										;INCREMENT 1 IN I 		
		MOV AX,HEIGHT_								;MOV HEIGHT_ TO AX
		CMP I,AX									;COMPARE AX WITH I
	JL SECOND_LOOP									;IF J LESS THAN AX JUMP TO LABEL SECOND_LOOP	
		
		MOV AX,WIDTH_								;MOV WIDTH_ TO AX
		MOV CX, AX									;MOV AX TO CX FOR LOOP
		LAST_LOOP:
		MOV AH, 2									;FIRE ;DISPLAY CHARACTER FUNCTION
		MOV DL, '#'									;CHARACTER IS '#'
		INT 21H										;DISPLAY IT

	LOOP LAST_LOOP									;LOOP

		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN

		LEA DX, ENEMIES_DESTROYED					;LOAD STRING
		MOV AH, 09H									;DISPLAY IT
		INT 21H
		
		MOV AH, 2									;DISPLAY FUNCTION
		MOV DL,SCORE								;MOVING SCORE TO DL
		ADD DL, 30H									;MAKING SCORE PRINTABLE
		INT 21H										;DISPLAYING IT
		
		
	RET												;RETURN IP NEXT TO DRAW
DRAW ENDP

INPUT  PROC

	
		IN AL,60H									;GETTING VALUE FROM PORT # 60 

		CMP AL, 9EH									;COMPARE AL WITH 9EH ('A' SCAN CODE KEYBOARD)
		JE LEFT										;IF EQUAL JUMP TO LEFT LABEL
		
		CMP AL, 0A0H								;COMPARE AL WITH 0A0H ('D' SCAN CODE KEYBOARD)
		JE RIGHT									;IF EQUAL JUMP TO RIGHT LABEL
	
		CMP AL, 0A1H								;COMPARE AL WITH 0A1H ('F' SCAN CODE KEYBOARD)
		JE FIRE										;IF EQUAL JUMP TO FIRE LABEL
	
		CMP AL, 81H									;COMPARE AL WITH 81H ('ESCAPE' SCAN CODE KEYBOARD)
		JE EXIT_TRUE								;JUMP IF EQUAL TO EXIT_TRUE
		
		
	JMP END_										;JUMP TO LABEL END_

	LEFT:
		CMP X, 1									;COMPARE X WITH 1
		JNG END_									;IF X NOT GREATER THAN 1 JUMP TO LABEL END_
		DEC X										;DECREMENT 1 IN X 
	JMP END_										;JUMP TO LABEL END_


	RIGHT:
		MOV AX, WIDTH_								;MOV WIDTH TO AX
		SUB AX, 2									;SUBTRACT AX WITH 2
		CMP X, AX									;COMPARE X WITH AX
		JNL END_									;IF X NOT LESS THAN AX JUMP TO LABEL END_
		INC X										;INCREMENT 1 IN X
	JMP END_                                   		;JUMP TO LABEL END_


	FIRE:
		MOV AX, X									;MOV X TO AX
		MOV FX, AX									;MOV AX TO FX
		MOV AX,HEIGHT_								;MOV HEIGHT_ TO AX 
		SUB AX,2									;SUBTRACT AX WITH 2
		MOV FY, AX									;MOV AX TO FY 
	JMP END_
		
	EXIT_TRUE:
		MOV GAMEOVER, 1								;MAKE GAMEOVER = TRUE
		JMP END_									
		
	END_:
		MOV AL, 'P'									;CAN MOVE ANYTHING TO AL
		OUT 60H, AL									;CHANGING THE PORT VALUE
		XOR AX,AX									;CLEAR AX
RET													;RETURN IP NEXT TO INPUT CALL
INPUT ENDP

LOGIC PROC

		DEC FY										;DECREMENT FY BY 1
													;IMPLEMENTING IF::IF(FY == EY && FX == EX)	
		MOV BX, FY
		CMP BX, EY									;COMPARING FY & EY
		JNE NEXT1									;IF NOT EQUAL JUMP TO NEXT IF LABLED AS NEXT1
		
		MOV BX, FX
		CMP BX, EX									;COMPARING FX AND EX
		JNE NEXT1									;IF NOT EQUAL JUMP TO NEXT IF LABLED AS NEXT1

		
		MOV DX, 0									;CLEAR DX
		MOV DL, SCORE								;MOVE CURRENT SCORE TO DL
		ADD DL, 1									;ADD 1 TO DL
		MOV SCORE, DL								;MOV DL(THE INCREMENTED VAUE OF SCORE) BACK TO SCORE

				
		
	RNDM:
		MOV AH, 2CH									;SET FUNCTION CODE
		INT 21H										;GET TIME FROM MS - DOS
		MOV AX, DX									;DH = SECONDS, DL = HUNDREDTHS OF SECOND
		AND AX, 0FH									;AND AX WITH 0FH
		TEST AX, 01H								;AND AX WITH 01H BUT NOT CHANGING AX
		JZ NEX_										;IF ZERO FLAG IS SET JUMP TO NEX_ LABEL
		ADD AX, 0BH									;AND AX WITH 0BH
	NEX_:
		CMP AX, 1									;COMPARE AX WITH 1
		JL RNDM										;IF LESS THAN 1 JUMP TO RNDM LABEL
		CMP AX, 28									;COMPARE AX WITH 28
		JG RNDM										;IF GREATER THAN 1 JUMP TO RNDM LABEL
		MOV EX, AX									;MOV AX TO EX

		MOV EY, 0									;MOV 0 TO ENEMY 
		MOV FX, -2									;DISAPPEARING FIRE
		MOV FY, -2								
		
	
	NEXT1:

													;IMPLEMENTING IF::IF(CLOCK % 5 == 0)

		MOV AL, CLOCK								;MOV CLOCK TO AL
		MOV BL, 5									;MOV 5 TO BL
		DIV BL										;DIV AL BY BL(CLOCK BY 5)
		CMP AH, 0									;AH CONTAIN REMINDER COMPARE IT TO 0
		JNE NEXT2									;IF REMINDER IS NON ZERO IF ISFALSE JMP TO NEXT LABLE(IF)
	
		
		INC EY										;INCREMENT EY

		

	NEXT2:	
													;IMPLEMENTING IF::IF(ENEMYB == TRUE && EY == HEIGHT)

		MOV BL, ENEMYB								;MOVE ENEMY B TO BL
		CMP BL, 1									;MOVE 1 TO BL
		JNE NEXT0									;IF NOT EQUAL JMP TO LAST
		MOV AX, EY									;MOV EY TO AX
		MOV BX, HEIGHT_								;MOV HEIGHT TO BL
		CMP AX, BX									;COMPARE BL TO AL
		JNE NEXT0									;IF NOT EQUAL TO ZERO JMP TO END
		
		MOV GAMEOVER, 1								;MOV 1 TO GAMEOVER

	NEXT0:
	
RET
LOGIC ENDP

ROCKET PROC

		LEA DX,M1									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		
		LEA DX,M2									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE

		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		
		LEA DX,M3									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
	
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		
		LEA DX,M4									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE

		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		LEA DX,M6									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN		
		
		LEA DX,M8									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		
		LEA DX,M9									;GET MESSAGE 
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		
		LEA DX,M10									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		
		LEA DX,M11									;GET MESSAGE 
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		
		LEA DX,M12									;GET MESSAGE
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		LEA DX,M15									;GET MESSAGE									
		MOV AH,9									;DISPLAY STRING FUNCTION
		INT 21H										;DISPLAY MESSAGE
		
		MOV AH,2									;DISPLAY CHARACTER FUNCTION
		MOV DL,0AH									;LINE FEED 
		INT 21H										;EXECUTE LINE FEED
		MOV DL,0DH									;CARRIAGE RETURN
		INT 21H										;EXECUTE CARRIAGE RETURN
		
		

RET
ROCKET ENDP

  
DELAY PROC   
            MOV     CX, 005H						;MOVING 05 IN CX
    DELREP: PUSH    CX								;PUSHING IN STACK
            MOV     CX, 7530H						;MOVING 30000D IN CX
    DELDEC: DEC     CX								;DECREMENTING BY 1
            JNZ     DELDEC							;IF CX != KEEP DECREMENTING
            POP     CX								;POP 
            DEC     CX								;TILL NOT ZERO START AGAIN
            JNZ     DELREP							;END IF 0
            RET				
	RET
DELAY ENDP   


 
		END MAIN


